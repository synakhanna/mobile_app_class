{"ast":null,"code":"var _jsxFileName = \"/Users/synakhanna/Desktop/mobile_app_class/comp-lib/src/components/Accordion.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { GoChevronDown, GoChevronLeft } from 'react-icons/go';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Accordion(props) {\n  _s();\n  const [expandedIndex, setExpandedIndex] = useState(-1);\n  const {\n    items\n  } = props;\n  const renderedItems = items.map((item, index) => {\n    const isExpanded = index === expandedIndex;\n    const icon = /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-2xl\",\n      children: isExpanded ? /*#__PURE__*/_jsxDEV(GoChevronDown, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(GoChevronLeft, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 43\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this);\n    const handleClick = nextIndex => {\n      // setExpandedIndex(nextIndex)\n      setExpandedIndex(currentExpandedIndex => {\n        // if the item is already open, close it\n        // else open it\n        if (currentExpandedIndex === nextIndex) {\n          return -1;\n        } else {\n          return nextIndex;\n        }\n      });\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleClick(index),\n        className: \"flex justify-between p-3 bg-gray-100 border-b items-center cursor-pointer\",\n        children: [item.label, icon]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border-b p-5\",\n        children: item.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 24\n      }, this)]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderedItems\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 10\n  }, this);\n}\n_s(Accordion, \"VGgwYDkzE0V3NPfFAbSlb4lQBfI=\");\n_c = Accordion;\nvar _c;\n$RefreshReg$(_c, \"Accordion\");","map":{"version":3,"names":["useState","GoChevronDown","GoChevronLeft","jsxDEV","_jsxDEV","Accordion","props","_s","expandedIndex","setExpandedIndex","items","renderedItems","map","item","index","isExpanded","icon","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleClick","nextIndex","currentExpandedIndex","onClick","label","content","id","_c","$RefreshReg$"],"sources":["/Users/synakhanna/Desktop/mobile_app_class/comp-lib/src/components/Accordion.js"],"sourcesContent":["import {useState} from 'react'\nimport {GoChevronDown, GoChevronLeft} from 'react-icons/go'\n\nexport default function Accordion(props) {\n  const [expandedIndex, setExpandedIndex] = useState(-1)\n\n  const {items} = props\n  const renderedItems = items.map((item, index) => {\n    const isExpanded = index === expandedIndex\n    const icon = (\n      <span className=\"text-2xl\">\n        {/* Our first ternary! 1- condition that we are checking to be true \n        2- what to return if 1 is true,\n        3- what to render else, aka if the 1 condition is false*/}\n        {isExpanded ? <GoChevronDown /> : <GoChevronLeft />}\n      </span>\n    )\n\n    const handleClick = (nextIndex) => {\n      // setExpandedIndex(nextIndex)\n      setExpandedIndex((currentExpandedIndex) => {\n        // if the item is already open, close it\n        // else open it\n        if (currentExpandedIndex === nextIndex) {\n          return -1\n        } else {\n          return nextIndex\n        }\n      })\n    }\n    return (\n      <div key={item.id}>\n        <div\n          onClick={() => handleClick(index)}\n          className=\"flex justify-between p-3 bg-gray-100 border-b items-center cursor-pointer\"\n        >\n          {item.label}\n          {icon}\n        </div>\n        {/* If the content index matches the expanded index in state (isExpanded is true),\n        render it, otherwise render nothing */}\n        {isExpanded && <div className=\"border-b p-5\">{item.content}</div>}\n      </div>\n    )\n  })\n\n  return <div>{renderedItems}</div>\n}\n"],"mappings":";;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAC9B,SAAQC,aAAa,EAAEC,aAAa,QAAO,gBAAgB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3D,eAAe,SAASC,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACvC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEtD,MAAM;IAACU;EAAK,CAAC,GAAGJ,KAAK;EACrB,MAAMK,aAAa,GAAGD,KAAK,CAACE,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC/C,MAAMC,UAAU,GAAGD,KAAK,KAAKN,aAAa;IAC1C,MAAMQ,IAAI,gBACRZ,OAAA;MAAMa,SAAS,EAAC,UAAU;MAAAC,QAAA,EAIvBH,UAAU,gBAAGX,OAAA,CAACH,aAAa;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAAGlB,OAAA,CAACF,aAAa;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CACP;IAED,MAAMC,WAAW,GAAIC,SAAS,IAAK;MACjC;MACAf,gBAAgB,CAAEgB,oBAAoB,IAAK;QACzC;QACA;QACA,IAAIA,oBAAoB,KAAKD,SAAS,EAAE;UACtC,OAAO,CAAC,CAAC;QACX,CAAC,MAAM;UACL,OAAOA,SAAS;QAClB;MACF,CAAC,CAAC;IACJ,CAAC;IACD,oBACEpB,OAAA;MAAAc,QAAA,gBACEd,OAAA;QACEsB,OAAO,EAAEA,CAAA,KAAMH,WAAW,CAACT,KAAK,CAAE;QAClCG,SAAS,EAAC,2EAA2E;QAAAC,QAAA,GAEpFL,IAAI,CAACc,KAAK,EACVX,IAAI;MAAA;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,EAGLP,UAAU,iBAAIX,OAAA;QAAKa,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAEL,IAAI,CAACe;MAAO;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA,GAVzDT,IAAI,CAACgB,EAAE;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWZ,CAAC;EAEV,CAAC,CAAC;EAEF,oBAAOlB,OAAA;IAAAc,QAAA,EAAMP;EAAa;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACnC;AAACf,EAAA,CA5CuBF,SAAS;AAAAyB,EAAA,GAATzB,SAAS;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}